#!/command/with-contenv bash

source /assets/functions/00-container
output_off
prepare_service single
PROCESS_NAME="scheduling"



## Legacy
if var_false "${ENABLE_CRON}" ; then CONTAINER_ENABLE_SCHEDULING=FALSE ; fi
if var_true "${ENABLE_CRON}" ; then
    CONTAINER_ENABLE_SCHEDULING=TRUE
    CONTAINER_SCHEDULING_BACKEND="cron"
fi
##

# this is where we want to scan for every crontab env var and write it to its own file and leave a note where it came from or if it was part of system variables
## in the services available section is where we will parse the actual folder and then prepare the crontab right away. might need to update the bash alias to reload cron easy
if var_false "${CONTAINER_ENABLE_SCHEDULING}" ; then
    print_debug "Disabling Scheduling"
    service_stop "$(basename "$0")"
else
    case "${CONTAINER_SCHEDULING_BACKEND,,}" in
        "cron" )
            mkdir -p /tmp/.container/cron

            if [ "${SCHEDULING_LOG_TYPE,,}" = "file" ] ; then
                mkdir -p "${SCHEDULING_LOG_LOCATION}"
                touch "${SCHEDULING_LOG_LOCATION}"/cron.log
                create_logrotate cron "${SCHEDULING_LOG_LOCATION}"/cron.log
            fi

            if [ ! -d "${CONTAINER_SCHEDULING_LOCATION}" ]; then mkdir -p "${CONTAINER_SCHEDULING_LOCATION}" ; fi
            ## Docker Build and Runtime overrides
            cronenv=$(mktemp)
            set -o posix; set -f ; set | grep -E '^CRON_'| sed "s|CRON_||g" > ${cronenv}
            sed -i "/^PERIOD/d" "${cronenv}"
            while IFS= read -r cron_entry; do
                schedule_title="$(echo ${cron_entry} | cut -d = -f1 | tr '[:upper:]' '[:lower:]' )"
                schedule_value="$(echo ${cron_entry} | cut -d = -f2 )"
                schedule_value="$(echo ${schedule_value:1:-1})"
                if var_false "${schedule_value}" ; then
                    print_debug "Disabling ${schedule_title} scheduled task"
              cat <<EOF > "${CONTAINER_SCHEDULING_LOCATION}/${schedule_title}"
# Nulled execution of command  generated by Environment Variable defined in Image build, or Runtime argument
# Entered Value: ${schedule}
# Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')
EOF
                else
                    print_debug "Adding ${schedule_title} with to be parsed by ${CONTAINER_SCHEDULING_BACKEND}"
              cat <<EOF > "${CONTAINER_SCHEDULING_LOCATION}/${schedule_title}"
# Scheduled execution of command created automatically generated by Environment Variable defined in Image build, or Runtime argument
# Entered Value: ${schedule}
# Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

${schedule_value}
EOF
                fi
            done < ${cronenv}
            rm -rf $cronenv
            set +f
            unset cronenv schedules cron_entry schedule_value schedule_title
            unset "${!CRON_@}"

            ## Defaults
            for d in /assets/defaults/* ; do
                if [ "$d" != "/assets/defaults/00-container" ] ; then
                    # shellcheck source=/assets/defaults/
                    output_off
                    source $d
                    output_on
                    cronenv=$(mktemp)
                    set -o posix; set -f ; set | grep -E '^CRON_'| sed "s|CRON_||g" > "${cronenv}"
                    sed -i "/^PERIOD/d" "${cronenv}"
                    while IFS= read -r cron_entry; do
                        schedule_title="$(echo ${cron_entry} | cut -d = -f1 | tr '[:upper:]' '[:lower:]')"
                        schedule_value="$(echo ${cron_entry} | cut -d = -f2 )"
                        schedule_value="$(echo ${schedule_value:1:-1})"
                        if [ ! -f "${CONTAINER_SCHEDULING_LOCATION}/${schedule_title,,}" ] ; then
                            print_debug "Adding $schedule_title with value $schedule_value to crontab"
                      cat <<EOF > "${CONTAINER_SCHEDULING_LOCATION}/${schedule_title,,}"
# Scheduled execution of command taken from default file: '${d}'
# Entered Value: ${schedule}
# Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

${schedule_value}
EOF
                        else
                            print_debug "Skipping adding '${schedule_title}' as it already exists"
                        fi
                    done < "${cronenv}"
                    rm -rf $cronenv
                    set +f
                    unset cronenv schedules cron_entry schedule_value schedule_title
                    unset "${!CRON_@}"
                fi
            done
            print_notice "Container configured for scheduled tasks with 'cron'"
        ;;
        *)
            print_error "Unknown Scheduling Backend"
            exit 1
        ;;
    esac
fi

liftoff
output_on