# SPDX-FileCopyrightText: Â© 2024 Dave Conroy <dave@tiredofit.ca>
#
# SPDX-License-Identifier: MIT

toi_configure_scheduling_cron_init() {
    mkdir -p /container/state/cron

    if [ "${SCHEDULING_LOG_TYPE,,}" = "file" ] ; then
        mkdir -p "${SCHEDULING_LOG_LOCATION}"
        touch "${SCHEDULING_LOG_LOCATION}"/cron.log
        create_logrotate cron "${SCHEDULING_LOG_LOCATION}"/cron.log
    fi

    if [ ! -d "${CONTAINER_SCHEDULING_LOCATION}" ]; then mkdir -p "${CONTAINER_SCHEDULING_LOCATION}" ; fi
    ## Docker Build and Runtime overrides
    cronenv=$(mktemp)
    set -o posix; set -f ; set | grep -E '^CRON_'| sed "s|CRON_||g" > ${cronenv}
    sed -i "/^PERIOD/d" "${cronenv}"
    while IFS= read -r cron_entry; do
        schedule_title="$(echo ${cron_entry} | cut -d = -f1 | tr '[:upper:]' '[:lower:]' )"
        schedule_value="$(echo ${cron_entry} | cut -d = -f2 )"
        schedule_value="$(echo ${schedule_value:1:-1})"
        if var_false "${schedule_value}" ; then
            print_debug "Disabling ${schedule_title} scheduled task"
            cat <<EOF > "${CONTAINER_SCHEDULING_LOCATION}/${schedule_title}"
# Nulled execution of command  generated by Environment Variable defined in Image build, or Runtime argument
# Entered Value: ${schedule}
# Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')
EOF
        else
            print_debug "Adding ${schedule_title} with to be parsed by ${CONTAINER_SCHEDULING_BACKEND}"
            cat <<EOF > "${CONTAINER_SCHEDULING_LOCATION}/${schedule_title}"
# Scheduled execution of command created automatically generated by Environment Variable defined in Image build, or Runtime argument
# Entered Value: ${schedule}
# Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

${schedule_value}
EOF
        fi
    done < ${cronenv}
    rm -rf $cronenv
    set +f
    unset cronenv schedules cron_entry schedule_value schedule_title
    unset "${!CRON_@}"

    ## Defaults
    for default in $(find /container/base/defaults/* /container/defaults/* /override/base/defaults/* /override/defaults/* -type f -print 2>/dev/null); do
        # shellcheck source=/container/defaults/
        output_off
        source "${default}"
        output_on
        cronenv=$(mktemp)
        set -o posix; set -f ; set | grep -E '^CRON_'| sed "s|CRON_||g" > "${cronenv}"
        sed -i "/^PERIOD/d" "${cronenv}"
        while IFS= read -r cron_entry; do
            schedule_title="$(echo ${cron_entry} | cut -d = -f1 | tr '[:upper:]' '[:lower:]')"
            schedule_value="$(echo ${cron_entry} | cut -d = -f2 )"
            schedule_value="$(echo ${schedule_value:1:-1})"
            if [ ! -f "${CONTAINER_SCHEDULING_LOCATION}/${schedule_title,,}" ] ; then
                print_debug "Adding $schedule_title with value $schedule_value to crontab"
                cat <<EOF > "${CONTAINER_SCHEDULING_LOCATION}/${schedule_title,,}"
# Scheduled execution of command taken from default file: '${default}'
# Entered Value: ${schedule}
# Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

${schedule_value}
EOF
            else
                print_debug "Skipping adding '${schedule_title}' as it already exists"
            fi
        done < "${cronenv}"
        rm -rf $cronenv
        set +f
        unset cronenv schedules cron_entry schedule_value schedule_title
        unset "${!CRON_@}"
    done
    print_notice "Container configured for scheduled tasks with 'cron'"
}

toi_configure_scheduling_cron_run() {
    if [ "${SCHEDULING_LOG_TYPE,,}" = "file" ]; then
        cron_log_file="-L ${SCHEDULING_LOG_LOCATION}/cron.log"
    fi

    print_debug "Parsing all files from ${CONTAINER_SCHEDULING_LOCATION}"
    temp_crontab=$(date +%s)
    echo 'MAILTO=""' > $temp_crontab
    if dir_notempty "${CONTAINER_SCHEDULING_LOCATION_OVERRIDE}" ; then cp -R "${CONTAINER_SCHEDULING_LOCATION_OVERRIDE}"/* "${CONTAINER_SCHEDULING_LOCATION}"; fi
    if dir_empty "${CONTAINER_SCHEDULING_LOCATION}" ; then echo "# Intentionally empty" > "${CONTAINER_SCHEDULING_LOCATION}"/empty ; fi
    sed "/#/d" "${CONTAINER_SCHEDULING_LOCATION}"/* | awk 'NF' >> /container/state/cron/${temp_crontab}
    silent crontab -r
    crontab /container/state/cron/${temp_crontab}
    print_start "Starting cron"
    os=$(cat /etc/os-release |grep ^ID= | cut -d = -f2)
    case ${os} in
        "alpine" )
            output_on
            exec /usr/sbin/crond -f -l ${SCHEDULING_LOG_LEVEL} ${cron_log_file}
        ;;
        "debian" | "ubuntu" )
            output_on
            exec /usr/sbin/crond -f -l ${SCHEDULING_LOG_LEVEL} ${cron_log_file}
        ;;
    esac
}