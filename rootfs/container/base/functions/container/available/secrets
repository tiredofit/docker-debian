# SPDX-FileCopyrightText: Â© 2024 Dave Conroy <dave@tiredofit.ca>
#
# SPDX-License-Identifier: MIT

toi_parse_secrets() {
    transform_var file \
                        SECRET_SOURCE \
                        SECRET_TARGET_FILE \
                        SECRET_TARGET_FILE_GROUP \
                        SECRET_TARGET_FILE_PERMISSIONS \
                        SECRET_TARGET_FILE_USER \
                        SECRET_TARGET_PATH \
                        SECRET_TOKEN \
                        SECRET_TARGET_TYPE \
                        SECRET_TYPE

    transform_var tonum_01 \
                        SECRET_SOURCE \
                        SECRET_TARGET_FILE \
                        SECRET_TARGET_FILE_GROUP \
                        SECRET_TARGET_FILE_PERMISSIONS \
                        SECRET_TARGET_FILE_USER \
                        SECRET_TARGET_PATH \
                        SECRET_TOKEN \
                        SECRET_TARGET_TYPE \
                        SECRET_TYPE

    secretnum=$(printenv | sort | grep -cE '^SECRET([0-9].)_SOURCE')
    for (( secret = 01; secret <= secretnum; secret++ )) ; do
        secret=$(printf "%02d" $secret)
        transform_var file \
                            SECRET"${secret}"_SOURCE \
                            SECRET"${secret}"_TARGET_FILE \
                            SECRET"${secret}"_TARGET_FILE_GROUP \
                            SECRET"${secret}"_TARGET_FILE_PERMISSIONS \
                            SECRET"${secret}"_TARGET_FILE_USER \
                            SECRET"${secret}"_TARGET_PATH \
                            SECRET"${secret}"_TOKEN \
                            SECRET"${secret}"_TARGET_TYPE \
                            SECRET"${secret}"_TYPE

        transform_var populate SECRET"${secret}"_SOURCE SECRET_SOURCE mandatory
        transform_var populate SECRET"${secret}"_TARGET_FILE SECRET_TARGET_FILE mandatory
        transform_var populate SECRET"${secret}"_TARGET_FILE_GROUP SECRET_TARGET_FILE_GROUP
        transform_var populate SECRET"${secret}"_TARGET_FILE_PERMISSIONS SECRET_TARGET_FILE_PERMISSIONS
        transform_var populate SECRET"${secret}"_TARGET_FILE_USER SECRET_TARGET_FILE_USER
        transform_var populate SECRET"${secret}"_TARGET_PATH SECRET_TARGET_PATH mandatory
        transform_var populate SECRET"${secret}"_TARGET_TYPE SECRET_TARGET_TYPE mandatory
        transform_var populate SECRET"${secret}"_TOKEN SECRET_TOKEN mandatory
        transform_var populate SECRET"${secret}"_TYPE SECRET_TYPE mandatory

        case "${!SECRET_TYPE,,}" in
            * )
                print_debug "[secret${secret}] Using ${!SECRET_TYPE,,} Backend"
                if [ -f /container/base/defaults/secrets/${!SECRET_TYPE,,} ]; then source /container/base/defaults/secrets/${!SECRET_TYPE,,}; fi
                if [ -f /container/base/functions/available/secrets/${!SECRET_TYPE,,} ]; then source /container/base/functions/available/secrets/${!SECRET_TYPE,,} ; fi
                if [ -f /override/base/defaults/secrets/${!SECRET_TYPE,,} ]; then source /container/base/defaults/secrets/${!SECRET_TYPE,,}; fi
                if [ -f /override/base/functions/available/secrets/${!SECRET_TYPE,,} ]; then source /override/base/functions/available/secrets/${!SECRET_TYPE,,} ; fi
                call toi_secrets_"${!SECRET_TYPE,,}"
            ;;
        esac
    done
}

toi_secrets_infisical() {
    if var_true "${INFISICAL_CREATE_ENV}" ; then
        export INFISICAL_TOKEN="${!SECRET_TOKEN}"
        infisical

        if [ ! -d "${!SECRET_TARGET_PATH}" ]; then mkdir -p "${!SECRET_TARGET_PATH}" ; fi

        silent infisical --domain "${!SECRET_SOURCE}" run env > "${!SECRET_TARGET_PATH}"/"${!SECRET_TARGET_FILE}"
        infisical_exit_code=${?}

        if [ -f "${!SECRET_TARGET_PATH}"/"${!SECRET_TARGET_FILE}" ]; then
            chown "${!SECRET_TARGET_FILE_USER}":"${!SECRET_TARGET_FILE_USER}" "${!SECRET_TARGET_PATH}"/"${!SECRET_TARGET_FILE}"
            chmod "${!SECRET_TARGET_FILE_PERMISSIONS}" "${!SECRET_TARGET_PATH}"/"${!SECRET_TARGET_FILE}"
        fi

        if [ "${infisical_exit_code}" != 0 ] ; then
            print_error "[secrets${i}] Exporting secrets to variables failed!"
        fi
        unset infisical_exit_code
        unset INFISICAL_TOKEN
    fi
}